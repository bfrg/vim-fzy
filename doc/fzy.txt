*fzy.txt*  Run fzy asynchronously in a Vim terminal window.

Author:     bfrg <https://github.com/bfrg>
Website:    https://github.com/bfrg/vim-fzy
License:    Same terms as Vim itself (see |license|)


==============================================================================
INTRODUCTION                                                   *vim-fzy* *fzy*

vim-fzy provides a simple API for running https://github.com/jhawthorn/fzy
asynchronously in a |terminal-window| and invoking a callback function with
the selected item.

The terminal buffer can be displayed in either a normal window at the bottom
of the screen or in a |popup| window (requires Vim 8.2.0204).

==============================================================================
API                                                                  *fzy-api*

                                                                 *fzy#start()*
fzy#start({items}, {callback} [, {options}])
            Run fzy asynchronously in a new |terminal-window|. By default the
            fzy terminal buffer is opened in a normal window at the bottom of
            the screen.
                                                           *fzy-E10* *fzy-E11*
            {items} must be a |string| or a |list| of strings. When a string
            is passed, the string will be run as a command in 'shell' and its
            output piped to fzy. If {items} is a list, on systems that support
            FIFOs (named pipes), the items are written to a FIFO and passed as
            stdin to fzy. On all other systems that do not provide an "mkfifo"
            command, the items are instead written to a temporary file on
            disk before passed to fzy.

            {callback} is a |Funcref| that is invoked after an item has been
            selected. The function is called after the terminal window is
            closed. The callback function is called with one argument, the
            selected item. See also |fzy-examples| below.

            {options} is an optional |Dictionary| that can contain the
            following entries:

            "exe"           Path to fzy executable.
                            Default: value found in $PATH

            "lines"         Specify how many lines of results to show. Minimum
                            is 3 (limited by fzy)
                            Default: 10

            "prompt"        fzy input prompt.
                            Default: "> "

            "showinfo"      Whether to show the selection info line. If set to
                            1, fzy is invoked with the "--show-info" option.
                            Default: 0

            "statusline"    Content of the 'statusline' for the terminal
                            window. This entry is used only when fzy is
                            displayed in a normal window. Popup windows do not
                            have a statusline.
                            Default: "fzy-term"

            "popup"         When specified, fzy is opened in a popup window
                            (requires Vim 8.2.0204). "popup" must be a
                            dictionary, its keys are similar to what is passed
                            to |popup_create()|. The following keys can be
                            used to change the appearance and position of the
                            popup window:
                            "line", "pos", "col", "minwidth", "title", "drag",
                            "resize", "close", "highlight", "padding",
                            "border", "borderhighlight", "borderchars",
                            "zindex". See |popup-usage| for more details.
                            Default: >
                              {
                                'padding': [0,1,0,1],
                                'border': [],
                                'borderchars': ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
                                'minwidth': 80
                              }
<
            Note: The height of the popup window is set automatically based on
            the "lines", "padding" and "border" entries.

            When no "popup" entry is specified in {options}, the terminal
            window will appear at the bottom and occupy the full width of the
            Vim window.

            The function returns the buffer number of the terminal window. If
            opening the window fails zero is returned.

fzy#stop()                                              *fzy-E12* *fzy#stop()*
            Stop a running fzy process and close the corresponding terminal
            window. The function must be called with focus on a fzy terminal
            window. If the buffer is not a terminal window, an error is
            emitted.
            The result is a number. See |job_stop()| for details.

                                                                      *ft-fzy*
The |filetype| of the terminal buffer where fzy is running is set to fzy.

==============================================================================
EXAMPLES                                                        *fzy-examples*

1. Fuzzy-select a |colorscheme|:
>
    " Callback function invoked with the selected item
    function! s:fzy_cb(item)
        execute 'colorscheme' a:item
    endfunction

    function! s:setcolors() abort
        " List of colorschemes
        let items = getcompletion('', 'color')
        return fzy#start(items, function('s:fzy_cb'), {
                \ 'exe': expand('~/.local/bin/fzy'),
                \ 'lines': 10,
                \ 'prompt': '▶ ',
                \ 'statusline': ':colorscheme {name}'
                \ })
    endfunction

    command! -bar Color call s:setcolors()
    nnoremap <leader>c :<c-u>call <sid>setcolors()<cr>
<

2. List all |tags| and jump to the selected tag in the current window:
>
    " Callback function invoked with the selected item
    function! s:tags_cb(item) abort
        execute 'tjump' escape(a:item, '"')
    endfunction

    function! s:fuzzytags() abort
        " List of tags found in all tags files
        let items = uniq(sort(map(taglist('.*'), 'v:val.name')))
        return fzy#start(items, function('s:tags_cb'), {
                \ 'lines': 15,
                \ 'prompt': '▶ ',
                \ 'showinfo': 1,
                \ 'statusline': printf(':tjump [%d tags]', len(items))
                \ })
    endfunction

    command! -bar Tjump call s:fuzzytags()
<

3. Find files under a specified directory using find(1) and |:edit| the
   selected file in the current window:
>
    function! s:fuzzyfind(dir) abort
        " Ignore .git directories
        let items = printf('find %s -name .git -prune -o -type f -print',
                \ a:dir)
        return fzy#start(items, {i -> execute('edit ' . fnameescape(i))}, {
                \ 'lines': 15,
                \ 'prompt': '▶ ',
                \ 'showinfo': 1,
                \ 'statusline': printf(':edit {fname} [directory: %s]', a:dir)
                \ })
    endfunction

    command! -bar -nargs=? -complete=dir FzyFind
            \ call s:fuzzyfind(empty(<q-args>) ? getcwd() : <q-args>)
<

 vim:tw=78:et:ft=help:norl:
