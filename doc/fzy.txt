*fzy.txt*  Run fzy asynchronously in a Vim terminal window.

Author:     bfrg <https://github.com/bfrg>
Website:    https://github.com/bfrg/vim-fzy
License:    Same terms as Vim itself (see |license|)


==============================================================================
INTRODUCTION                                                   *vim-fzy* *fzy*

vim-fzy provides a simple API for running https://github.com/jhawthorn/fzy
asynchronously in a |terminal-window| and invoking a callback function with
the selected item.

==============================================================================
API                                                                  *fzy-api*

                                             *fzy-E10* *fzy-E11* *fzy#start()*
fzy#start({items}, {callback} [, {options}])
            Open a |terminal-window| and run fzy in it.

            {items} must be a |string| or a |list| of strings. When a string
            is passed, the string will be run as a command in 'shell' and its
            output piped to fzy. If {items} is a list, on systems that support
            FIFOs (named pipes), the items are written to a FIFO and passed as
            stdin to fzy. On all other systems that do not provide an "mkfifo"
            command, the items are instead written to a temporary file on
            disk before passed to fzy.

            {callback} is a |Funcref| that is invoked after an item has been
            selected. The function is called after the terminal window is
            closed. The callback function is called with one argument, the
            selected item. See |fzy-examples| below.

            {options} is an optional |Dictionary| that can contain the
            following entries:

            "height"        Height of the terminal window.
                            Default: 11

            "prompt"        fzy prompt.
                            Default: "> "

            "statusline"    Content of the 'statusline' for the terminal
                            window.
                            Default: "fzy-term"

            "cwd"           Current working directory for the shell process.
                            Default: same as |:pwd|

            Returns the buffer number of the terminal window. If opening the
            window fails zero is returned.

            The terminal window will always appear at the bottom and occupy
            the full width of the Vim window.

fzy#stop()                                              *fzy-E12* *fzy#stop()*
            Stop a running fzy process and close the corresponding terminal
            window. The function must be called with focus on a fzy terminal
            window. If the buffer is not a terminal window, an error is
            emitted.
            The result is a number. See |job_stop()| for details.

g:fzy                                                                  *g:fzy*
            All keys in the {options} argument in |fzy#start()| are optional.
            If "height", "prompt" or "statusline" is not passed to
            |fzy#start()|, the plugin will check if the key is set globally in
            |g:fzy| and use that value. If it isn't set in |g:fzy| either, the
            default value shown above (11 for "height", etc.) is used.

            The motivation behind this is to allow users to omit, for example,
            the "height" entry in all |fzy#start()| invocations and instead
            set the entry in their |vimrc| through |g:fzy|. See also
            |fzy-examples|.

            Note: Other keys in |g:fzy| are ignored. Plugins using vim-fzy may
            set their own options inside |g:fzy|.

                                                                      *ft-fzy*
The |filetype| of the terminal buffer where fzy is running is set to fzy.

==============================================================================
EXAMPLES                                                        *fzy-examples*

1. Fuzzy-select a |colorscheme|:
>
    " Callback function invoked with the selected item
    function! s:fzy_cb(item)
        execute 'colorscheme' a:item
    endfunction

    function! s:setcolors() abort
        " List of colorschemes
        let items = getcompletion('', 'color')
        return fzy#start(items, function('s:fzy_cb'), {
                \ 'height': 10,
                \ 'prompt': '▶ ',
                \ 'statusline': ':colorscheme {name}'
                \ })
    endfunction

    command! -bar Color call s:setcolors()
    nnoremap <leader>c :<c-u>call <sid>setcolors()<cr>
<
    Since "height", "prompt" and "statusline" are explicitly passed to
    |fzy#start()|, any values defined in |g:fzy| are ignored.

2. List all |tags| and jump to the selected tag in the current window:
>
    " Callback function invoked with the selected item
    function! s:tags_cb(item) abort
        execute 'tjump' escape(a:item, '"')
    endfunction

    function! s:fuzzytags() abort
        " List of tags found in all tags files
        let items = uniq(sort(map(taglist('.*'), 'v:val.name')))
        return fzy#start(items, function('s:tags_cb'), {
                \ 'height': 15,
                \ 'statusline': printf(':tjump [%d tags]', len(items))
                \ })
    endfunction

    command! -bar Tjump call s:fuzzytags()
<
    Since the "prompt" entry is omitted in |fzy#start()|, the plugin will
    check if it is defined in |g:fzy|, and if not, fall back to its default
    value "> ".

3. Find files under a specified directory using find(1) and |:edit| the
   selected file in the current window:
>
    " Set fzy prompt
    let g:fzy = {'prompt': '▶ '}

    function! s:fuzzyfind(dir) abort
        " Ignore .git directories
        let items = printf('find %s -name .git -prune -o -print', a:dir)
        return fzy#start(items, {i -> execute('edit ' . fnameescape(i))}, {
                \ 'statusline': printf(':edit {fname} [directory: %s]', a:dir)
                \ })
    endfunction

    command! -bar -nargs=? -complete=dir FzyFind
            \ call s:fuzzyfind(empty(<q-args>) ? getcwd() : <q-args>)
<
    Since "height" and "prompt" are not passed to |fzy#start()|, the global
    value for "prompt" set in |g:fzy| is used. The height of the terminal
    window will be set to its default value 11.

4. Find files under a specified directory using https://github.com/sharkdp/fd
   and edit the selected file in a new |:split|:
>
    function! s:find_cb(dir, item) abort
        let file = a:dir .. '/' .. fnameescape(a:item)
        execute 'split' fnamemodify(simplify(file), ':.')
    endfunction

    function! s:fuzzyfind(dir) abort
        let dir = fnamemodify(a:dir, ':~')
        let items = 'fd --type f --type l'
        return fzy#start(items, function('s:find_cb', [dir]), {
                \ 'statusline': printf(':edit {fname} [directory: %s]', dir),
                \ 'cwd': a:dir
                \ })
    endfunction

    command! -bar -nargs=? -complete=dir Fd
            \ call s:fuzzyfind(empty(<q-args>) ? getcwd() : <q-args>)
<
    We pass "cwd" to |fzy#start()| in order to run "fd" in the specified
    directory directly instead of passing it to "fd". This avoids printing the
    directory in front of every filename, and hence make the fuzzy-search more
    efficient.

 vim:tw=78:et:ft=help:norl:
