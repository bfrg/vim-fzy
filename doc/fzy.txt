*fzy.txt*  Run fzy asynchronously in a Vim terminal window.

Author:     bfrg <https://github.com/bfrg>
Website:    https://github.com/bfrg/vim-fzy
License:    Same terms as Vim itself (see |license|)

==============================================================================
INTRODUCTION                                                         *vim-fzy*

vim-fzy provides commands for quickly navigating to files under a directory,
jumping to lines matching a pattern using a grep command, opening |:buffers|,
tags generated by ctags, |:help| tags, |:oldfiles|, as well as |:marks| using
the fuzzy-searcher https://github.com/jhawthorn/fzy.

The terminal buffer is opened either in a normal window at the bottom of the
screen or in a |popup-window| (requires Vim 8.2.0204).

==============================================================================
COMMANDS                                                        *fzy-commands*

:FzyFind [dir]                                                      *:FzyFind*
            Find files recursively under the directory [dir], open the
            selected file in the current window.

            The file-search command can be specified through |g:fzy.findcmd|
            (see below).

            If [dir] is omitted, the search is performed in the current
            working directory (as obtained by |getcwd()|).

:FzyGrep {args}                                                     *:FzyGrep*
            Find lines matching the pattern specified with {args} using a grep
            command, jump to the selected location in the current window.

            The grep-search command can be specified with |g:fzy.grepcmd|. The
            grep-output is parsed with |g:fzy.grepformat| (see below).

            Note: special characters like % and # in {args} are expanded
            before the grep command is invoked. To avoid that insert a
            backslash before the character. See |cmdline-special| for more
            details.

:FzyBuffer[!]                                                     *:FzyBuffer*
            List buffers (same as |:ls|), edit the selected buffer in current
            window.

            Add ! to show all existing buffers (listed and unlisted buffers).
            This is similar to the |:ls|! output.

:FzyArgs                                                            *:FzyArgs*
            List the global |argument-list|, edit the selected file in the
            current window.

:FzyLargs                                                          *:FzyLargs*
            List the local |argument-list| (local to the window), edit the
            selected file in the current window.

:FzyOldfiles                                                    *:FzyOldfiles*
            List |:oldfiles|, edit the selected file in the current window.

:FzyTjump                                                          *:FzyTjump*
            List tags from all tags files, jump to the selected tag in the
            current window. This is similar to |:tjump|.

:FzyMarks[!]                                                       *:FzyMarks*
            List marks (same as |:marks|), jump to the selected mark in the
            current window.

            Add ! to jump to the selected mark without changing the jumplist
            when jumping within the current buffer.

:FzyHelp                                                            *:FzyHelp*
            List all help tags, jump to the selected tag in a new |split|.
            The Command can be preceded by a command modifier (see below).

            Note that Vim does not provide any commands to open a help page in
            the current window.

                                                          *fzy-commands-split*
Each command has a related command that opens the selected item in a new
|split|.

*:FzyFindSplit*
            Same as |:FzyFind|, but opens the selected file in a new |split|.
*:FzyGrepSplit*
            Same as |:FzyGrep|, but opens the selected file in a new |split|.
*:FzyBufferSplit*
            Same as |:FzyBuffer|, but opens selected buffer in new |split|.
*:FzyArgsSplit*
            Same as |:FzyArgs|, but opens the selected file in new |split|.
*:FzyLargsSplit*
            Same as |:FzyLargs|, but opens the selected file in new |split|.
*:FzyOldfilesSplit*
            Same as |:FzyOldfiles|, but opens selected file in new |split|.
*:FzyTjumpSplit*
            Same as |:FzyTjump|, but opens the selected tag in new |split|.
*:FzyMarksSplit*
            Same as |:FzyMarks|, but jump to the selected mark in new |split|.

The commands can be preceded by a command modifier. For example, to open the
selected file in a new |vertical| split, run >
    :vert FzyFindSplit [dir]
<
    Possible modifiers:
        |vertical|
        |tab|
        |topleft|
        |botright|
        |leftabove|  (same as |aboveleft|)
        |rightbelow| (same as |belowright|)

==============================================================================
CONFIGURATION                                                     *fzy-config*

                                                                       *g:fzy*
Options can be passed to fzy through the |Dictionary| variable g:fzy. The
following options are supported:

    lines                                                        *g:fzy.lines*
            Specify how many lines of results to show. This is equivalent to
            fzy's "--lines" option.
            Default: 10

    prompt                                                      *g:fzy.prompt*
            Fzy input prompt. Equivalent to fzy's "--prompt" option.
            Default: "▶ "

    showinfo                                                  *g:fzy.showinfo*
            Show selection info line. Equivalent to fzy's "--show-info"
            option.
            Default: 0

    term_highlight                                      *g:fzy.term_highlight*
            Highlighting for the terminal window. Requires Vim >= 8.2.0455.
            Default: |hl-Terminal|

    popupwin                                                  *g:fzy.popupwin*
            If true, fzy is opened in a |popup-terminal|. Note: This requires
            Vim >= 8.2.0204. The appearance of the popup window can be
            specified through the "popup" entry (see below).
            Default: |v:false|

    popup                                                        *g:fzy.popup*
            Dictionary for setting the appearance of the popup window.
            Default: `{'padding': [0,1,0,1], 'border': [], 'minwidth': 80}`

            The following popup options are supported:
            "line", "col", "pos", "minwidth", "drag", "resize", "close",
            "padding", "border", "borderhighlight", "borderchars",
            "highlight", and "zindex". For more details on each entry see
            |popup-usage| as well as the examples below.

    findcmd                                                    *g:fzy.findcmd*
            Set the find executable for the |:FzyFind| and |:FzyFindSplit|
            commands. Example: >
                let g:fzy = {'findcmd': 'fd --type f'}
<
            The file-search command is always run in the specified search
            directory to avoid long file paths.

            If no |g:fzy.findcmd| is specified, the default find(1) executable
            is used: >
                find
                  -name '.*'
                  -a '!' -name .
                  -a '!' -name .gitignore
                  -a '!' -name .vim
                  -a -prune
                  -o '(' -type f -o -type l ')'
                  -a -print 2> /dev/null
                | sed 's/^\.\///'
<
            Broken down the expression means:
                - ignore all files and directories starting with a dot,
                - except for the current directory, .gitignore and .vim
                - list only files and symlinks
                - the sed(1) command will remove the "./" prefix from all file
                  paths

    grepcmd                                                    *g:fzy.grepcmd*
            Set the grep executable for the |:FzyGrep| and |:FzyGrepSplit|
            commands. Example: >
                let g:fzy = {'grepcmd': 'rg --vimgrep'}
<
            If not specified, defaults to 'grepprg'.

            Note: All arguments passed to |:FzyGrep| and |:FzyGrepSplit| are
            appended to |g:fzy.grepcmd|. I.e. running ":FzyGrep foo $PROJECT"
            will run "rg --vimgrep foo $PROJECT" in the 'shell' before passing
            the output to fzy.

    grepformat                                              *g:fzy.grepformat*
            Set the format string for parsing the fuzzy-selected grep-output
            line. This is a scanf-like string that uses the same format as the
            'grepformat' option. Example: >
                let g:fzy = {
                    'grepcmd': 'rg --vimgrep',
                    'grepformat': '%f:%l:%c:%m'
                }
<
            If not specified, defaults to 'grepformat'.

==============================================================================
CONFIGURATION EXAMPLES                                   *fzy-config-examples*

1. Display 15 items, use a custom prompt, and show the selection info line: >
    let g:fzy = {
            \ 'lines': 15,
            \ 'prompt': '>>> ',
            \ 'showinfo': 1
            \ }

2. Same as 1. but display fzy in a popup window, use the default popup
   options: >
    let g:fzy = {
            \ 'lines': 15,
            \ 'prompt': '>>> ',
            \ 'showinfo': 1,
            \ 'popupwin': 1
            \ }

3. Use a custom popup border and custom highlighting: >
    let g:fzy = {
            \   'lines': 15,
            \   'showinfo': 1,
            \   'term_highlight': 'NormalDark',
            \   'popupwin': 1,
            \   'popup': {
            \     'minwidth': 90,
            \     'highlight': 'NormalDark',
            \     'borderchars': ['─', '│', '─', '│', '┌', '┐', '┘', '└'],
            \     'padding': [0, 1, 0, 1],
            \     'borderhighlight': ['GreyDark']
            \   }
            \ }

4. Same as 3. but don't draw a popup border: >
    let g:fzy = {
            \   'lines': 15,
            \   'showinfo': 1,
            \   'term_highlight': 'NormalDark',
            \   'popupwin': 1,
            \   'popup': {
            \     'minwidth': 90,
            \     'highlight': 'NormalDark',
            \     'borderchars': [' '],
            \     'padding': [0, 1, 0, 1],
            \     'borderhighlight': ['GreyDark']
            \   }
            \ }

5. Display the popup window at the 5th screen line from the top of the
   screen: >
    let g:fzy = {
            \   'lines': 15,
            \   'showinfo': 1,
            \   'popupwin': 1,
            \   'popup': {
            \     'padding': [0, 1, 0, 1],
            \     'pos': 'topleft',
            \     'line': 5,
            \   }
            \ }

6. Find files using fd https://github.com/sharkdp/fd
>
    let g:fzy = {'findcmd': 'fd --type f --type l --exclude tmp'}
<
7. Find files using ripgrep https://github.com/BurntSushi/ripgrep
>
    let g:fzy = {'findcmd': 'rg --files --no-messages'}
<
8. Find files using the_silver_searcher
   https://github.com/ggreer/the_silver_searcher
>
    let g:fzy = {'findcmd': 'ag --silent --ignore __pycache__ -g ""'}
<
9. Find lines that match a pattern using grep(1):
>
    let g:fzy = {'grepcmd': 'grep -Hn', 'grepformat': '%f:%l:%m'}
<
10. Find lines that match a pattern using ripgrep:
>
    let g:fzy = {
        'grepcmd': 'rg --vimgrep --smart-case --sort path',
        'grepformat': '%f:%l:%c:%m'
    }
<
==============================================================================
API                                                                  *fzy-api*

                                                                 *fzy#start()*
fzy#start({items}, {callback} [, {options}])
        Run fzy asynchronously in a new |terminal-window|. By default the fzy
        terminal buffer is opened in a normal window at the bottom of the
        screen.
                                                           *fzy-E10* *fzy-E11*
        {items} must be a |string| or a |list| of strings. When a string is
        passed, the string will be run as a command in 'shell' and its output
        piped to fzy. If {items} is a list, on systems that support FIFOs
        (named pipes), the items are written to a FIFO and passed as stdin to
        fzy. On all other systems that do not provide an "mkfifo" command, the
        items are instead written to a temporary file on disk before passed to
        fzy.

        {callback} is a |Funcref| that is invoked after an item has been
        selected. The function is called after the terminal window is closed.
        The callback function is called with one argument, the selected item.
        See |fzy-api-examples| below.

        {options} is an optional |Dictionary| that can contain the following
        entries:

        "exe"               Path to fzy executable.
                            Default: value found in $PATH

        "lines"             Specify how many lines of results to show. Minimum
                            is 3 (limited by fzy)
                            Default: 10

        "prompt"            fzy input prompt.
                            Default: "> "

        "showinfo"          Whether to show the selection info line. If set to
                            1, fzy is invoked with the "--show-info" option.
                            Default: 0

        "statusline"        Content of the 'statusline' for the terminal
                            window. This entry is used only when fzy is
                            displayed in a normal window. Popup windows do not
                            have a statusline, use the "title" entry instead.
                            Default: "fzy-term"

        "term_highlight"    Highlight group for the terminal window. This
                            requires Vim >= 8.2.0455.
                            Default: |hl-Terminal| (normal window), |hl-Pmenu|
                            (popup window)

        "popupwin"          If true, fzy is opened in a |popup-terminal|. This
                            requires Vim >= 8.2.0204. The appearance of the
                            popup window can be specified through the "popup"
                            entry (see below).
                            Default: |v:false|

        "popup"             Dictionary for setting popup options. The keys are
                            similar to what is passed to |popup_create()|. The
                            following keys can be used to change the
                            appearance and position of the popup window:
                            "line", "pos", "col", "minwidth", "title", "drag",
                            "resize", "close", "highlight", "padding",
                            "border", "borderhighlight", "borderchars",
                            "zindex". See |popup-usage| for more details.
                            Default: >
                              {
                                'padding': [0,1,0,1],
                                'border': [],
                                'minwidth': 80
                              }
<
        Note: The height of the popup window is set automatically based on
        the "lines", "padding" and "border" entries.

        When "popupwin" is set to |v:false|, the terminal window is displayed
        at the bottom and occupy the full width of the Vim window.

        The function returns the buffer number of the terminal window. If
        opening the window fails zero is returned.

fzy#stop()                                              *fzy-E12* *fzy#stop()*
        Stop a running fzy process and close the corresponding terminal
        window. The function must be called with focus on a fzy terminal
        window. If the buffer is not a terminal window, an error is emitted.
        The result is a number. See |job_stop()| for details.

                                                                      *ft-fzy*
The |filetype| of the terminal buffer where fzy is running is set to fzy.

==============================================================================
EXAMPLES                                                    *fzy-api-examples*

Fuzzy-select a |colorscheme|:
>
    " Callback function invoked with the selected item
    function s:fzy_cb(item)
        execute 'colorscheme' a:item
    endfunction

    function s:setcolors() abort
        " List of colorschemes
        let items = getcompletion('', 'color')
        return fzy#start(items, funcref('s:fzy_cb'), {
                \ 'exe': expand('~/.local/bin/fzy'),
                \ 'lines': 15,
                \ 'prompt': '▶ ',
                \ 'statusline': ':colorscheme {name}'
                \ })
    endfunction

    command Color call s:setcolors()
    nnoremap <Leader>c :<C-u>call <SID>setcolors()<CR>
<
 vim:tw=78:et:ft=help:norl:
