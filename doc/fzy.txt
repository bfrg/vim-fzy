*fzy.txt*  Run fzy asynchronously in a Vim terminal window.

Author:     bfrg <https://github.com/bfrg>
Website:    https://github.com/bfrg/vim-fzy
License:    Same terms as Vim itself (see |license|)


==============================================================================
INTRODUCTION                                                   *vim-fzy* *fzy*

vim-fzy provides a simple API for running https://github.com/jhawthorn/fzy
asynchronously in a |terminal-window| and invoking a callback function with
the selected item.

==============================================================================
API                                                                  *fzy-api*

                                             *fzy-E10* *fzy-E11* *fzy#start()*
fzy#start({items}, {callback} [, {options}])
            Open a |terminal-window| and run fzy in it.

            {items} must be a |string| or a |list| of strings. When a string
            is passed, the string will be run as a command in 'shell' and its
            output piped to fzy. If {items} is a list, on systems that support
            FIFOs (named pipes), the items are written to a FIFO and passed as
            stdin to fzy. On all other systems that do not provide an "mkfifo"
            command, the items are instead written to a temporary file on
            disk before passed to fzy.

            {callback} is a |Funcref| that is invoked after an item has been
            selected. The function is called after the terminal window is
            closed. The callback function is called with one argument, the
            selected item. See |fzy-examples| below.

            {options} is an optional |Dictionary| that can contain the
            following entries:

            "height"        Height of the terminal window.
                            Default: 11

            "prompt"        fzy prompt.
                            Default: "> "

            "statusline"    Content of the 'statusline' for the terminal
                            window.
                            Default: "fzy-term"

            Returns the buffer number of the terminal window. If opening the
            window fails zero is returned.

            The terminal window will always appear at the bottom and occupy
            the full width of the Vim window.

fzy#stop()                                              *fzy-E12* *fzy#stop()*
            Stop a running fzy process and close the corresponding terminal
            window. The function must be called with focus on a fzy terminal
            window. If the buffer is not a terminal window, an error is
            emitted.
            The result is a number. See |job_stop()| for details.

                                                                      *ft-fzy*
The |filetype| of the terminal buffer where fzy is running is set to fzy.

==============================================================================
EXAMPLES                                                        *fzy-examples*

Fuzzy-select a |colorscheme|:
>
    function! s:fzy_cb(item)
        execute 'colorscheme' a:item
    endfunction

    function! s:setcolors() abort
        let items = getcompletion('', 'color')
        return fzy#start(items, function('s:fzy_cb'), {
                \ 'height': 10,
                \ 'prompt': '▶ ',
                \ 'statusline': ':colorscheme {name}'
                \ })
    endfunction

    command! -bar Color call s:setcolors()
    nnoremap <leader>c :<c-u>call <sid>setcolors()<cr>
<

List files under a specified directory using find(1) and |edit| the selected
file in the current window:
>
    function! s:fuzzyfind(dir) abort
        " Ignore .git directories
        let items = printf('find %s -name .git -prune -o -print', a:dir)
        return fzy#start(items, {i -> execute('edit ' . fnameescape(i))}, {
                \ 'height': 15,
                \ 'prompt': '▶ ',
                \ 'statusline': printf(':edit {fname} [directory: %s]', a:dir)
                \ })
    endfunction
    command! -bar -nargs=? -complete=dir FzyFind
            \ call s:fuzzyfind(empty(<q-args>) ? getcwd() : <q-args>)
<

==============================================================================
AVAILABLE SOURCES                                                *fzy-sources*

TODO: add links to available |vim-fzy| sources.

 vim:tw=78:et:ft=help:norl:
